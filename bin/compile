#!/bin/sh

# Load our configuration variables.
. "$1/RustConfig"

# Check our configuration options.
if [ -z "$URL" ]; then
  echo "failed: RustConfig must set URL to point to a Rust binary tarball."
  exit 1
fi
if [ -z "$VERSION" ]; then
  echo "failed: RustConfig must set VERSION to indicate the Rust version."
  exit 1
fi

# Check our Cargo configuration options if we have Cargo.toml.
if [ ! -f "$1/Cargo.toml" ]; then
  echo "failed: Cargo.toml must exist in project"
  exit 1
fi

# Switch to our cache directory.
mkdir -p "$2"
cd "$2"

# Work around https://github.com/rust-lang/cargo/issues/598 on Ubuntu 10.04.
export SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt

# Make sure we have the correct Rust binaries and set up PATH.
if [ -d rust-cache-$VERSION ]; then
  echo "-----> Using Rust version $VERSION"
else
  echo "-----> Downloading Rust version $VERSION binaries from $URL"

  rm -f rust.tar.gz
  rm -rf rust-cache-*
  curl -o rust.tar.gz "$URL"

  echo "-----> Extracting Rust binaries"

  mkdir rust-cache-$VERSION
  tar xzf rust.tar.gz -C rust-cache-$VERSION
  rm -r rust.tar.gz
fi
rust_path=`ls -1d "$2/rust-cache-$VERSION/"*""`
if [ ! -x "$rust_path/rustc/bin/rustc" ]; then
    echo "failed: Cannot find rust binaries at $rust_path/rustc/bin"
    exit 1
fi
PATH="$rust_path/rustc/bin:$PATH"
PATH="$rust_path/cargo/bin:$PATH"
export LD_LIBRARY_PATH="$rust_path/rustc/lib:$rust_path/cargo/lib"

echo $LD_LIBRARY_PATH

if [ -f "$1/Cargo.toml" ]; then

  # Make sure we have a fake home directory for the Cargo cache.  Ideally
  # we would keep these in our cache, but our ".git" directories don't
  # survive between builds.
  cargo_home="$(mktemp -d -t cargo_XXXX)"

  # Build the actual application using Cargo.
  echo "-----> Building application using Cargo"

  cd "$1"
  # To debug git issues:
  #export RUST_LOG="cargo::sources::git=debug"
  HOME="$cargo_home" cargo build --verbose --release
else
  # Build the actual application using Make.
  echo "-----> Building application using Make"
  cd "$1"
  make
fi
